
/*
Auto-generated by CVXPYgen on November 29, 2023 at 21:15:35.
Content: Type definitions and variable declarations.
*/

#include "ecos.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef double c_float;
typedef int c_int;

// Compressed sparse column (csc) matrix
typedef struct {
  c_int      nzmax;
  c_int      n;
  c_int      m;
  c_int      *p;
  c_int      *i;
  c_float    *x;
  c_int      nz;
} csc;

// Canonical parameters
typedef struct {
  c_float    *c;         // Canonical parameter c
  c_float    d;          // Canonical parameter d
  csc        *A;         // Canonical parameter A
  c_float    *b;         // Canonical parameter b
  csc        *G;         // Canonical parameter G
  c_float    *h;         // Canonical parameter h
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        c;          // Bool, if canonical parameter c outdated
  int        d;          // Bool, if canonical parameter d outdated
  int        A;          // Bool, if canonical parameter A outdated
  int        b;          // Bool, if canonical parameter b outdated
  int        G;          // Bool, if canonical parameter G outdated
  int        h;          // Bool, if canonical parameter h outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  c_float    *X;         // Your variable X
  c_float    *U;         // Your variable U
  c_float    *X_cmp;     // Your variable X_cmp
} CPG_Prim_t;

// Dual solution
typedef struct {
  c_float    *d0;        // Your dual variable for constraint d0
  c_float    *d1;        // Your dual variable for constraint d1
  c_float    d2;         // Your dual variable for constraint d2
  c_float    d3;         // Your dual variable for constraint d3
  c_float    d4;         // Your dual variable for constraint d4
  c_float    d5;         // Your dual variable for constraint d5
  c_float    d6;         // Your dual variable for constraint d6
  c_float    d7;         // Your dual variable for constraint d7
  c_float    d8;         // Your dual variable for constraint d8
  c_float    d9;         // Your dual variable for constraint d9
  c_float    d10;        // Your dual variable for constraint d10
  c_float    d11;        // Your dual variable for constraint d11
  c_float    d12;        // Your dual variable for constraint d12
  c_float    *d13;       // Your dual variable for constraint d13
  c_float    d14;        // Your dual variable for constraint d14
  c_float    d15;        // Your dual variable for constraint d15
  c_float    d16;        // Your dual variable for constraint d16
  c_float    d17;        // Your dual variable for constraint d17
  c_float    d18;        // Your dual variable for constraint d18
  c_float    d19;        // Your dual variable for constraint d19
  c_float    d20;        // Your dual variable for constraint d20
  c_float    d21;        // Your dual variable for constraint d21
  c_float    d22;        // Your dual variable for constraint d22
  c_float    d23;        // Your dual variable for constraint d23
  c_float    d24;        // Your dual variable for constraint d24
  c_float    *d25;       // Your dual variable for constraint d25
  c_float    d26;        // Your dual variable for constraint d26
  c_float    d27;        // Your dual variable for constraint d27
  c_float    d28;        // Your dual variable for constraint d28
  c_float    d29;        // Your dual variable for constraint d29
  c_float    d30;        // Your dual variable for constraint d30
  c_float    d31;        // Your dual variable for constraint d31
  c_float    d32;        // Your dual variable for constraint d32
  c_float    d33;        // Your dual variable for constraint d33
  c_float    d34;        // Your dual variable for constraint d34
  c_float    d35;        // Your dual variable for constraint d35
  c_float    d36;        // Your dual variable for constraint d36
  c_float    *d37;       // Your dual variable for constraint d37
  c_float    d38;        // Your dual variable for constraint d38
  c_float    d39;        // Your dual variable for constraint d39
  c_float    d40;        // Your dual variable for constraint d40
  c_float    d41;        // Your dual variable for constraint d41
  c_float    d42;        // Your dual variable for constraint d42
  c_float    d43;        // Your dual variable for constraint d43
  c_float    d44;        // Your dual variable for constraint d44
  c_float    d45;        // Your dual variable for constraint d45
  c_float    d46;        // Your dual variable for constraint d46
  c_float    d47;        // Your dual variable for constraint d47
  c_float    d48;        // Your dual variable for constraint d48
  c_float    *d49;       // Your dual variable for constraint d49
  c_float    d50;        // Your dual variable for constraint d50
  c_float    d51;        // Your dual variable for constraint d51
  c_float    d52;        // Your dual variable for constraint d52
  c_float    d53;        // Your dual variable for constraint d53
  c_float    d54;        // Your dual variable for constraint d54
  c_float    d55;        // Your dual variable for constraint d55
  c_float    d56;        // Your dual variable for constraint d56
  c_float    d57;        // Your dual variable for constraint d57
  c_float    d58;        // Your dual variable for constraint d58
  c_float    d59;        // Your dual variable for constraint d59
  c_float    d60;        // Your dual variable for constraint d60
  c_float    *d61;       // Your dual variable for constraint d61
  c_float    d62;        // Your dual variable for constraint d62
  c_float    d63;        // Your dual variable for constraint d63
  c_float    d64;        // Your dual variable for constraint d64
  c_float    d65;        // Your dual variable for constraint d65
  c_float    d66;        // Your dual variable for constraint d66
  c_float    d67;        // Your dual variable for constraint d67
  c_float    d68;        // Your dual variable for constraint d68
  c_float    d69;        // Your dual variable for constraint d69
  c_float    d70;        // Your dual variable for constraint d70
  c_float    d71;        // Your dual variable for constraint d71
  c_float    d72;        // Your dual variable for constraint d72
  c_float    *d73;       // Your dual variable for constraint d73
  c_float    d74;        // Your dual variable for constraint d74
  c_float    d75;        // Your dual variable for constraint d75
  c_float    d76;        // Your dual variable for constraint d76
  c_float    d77;        // Your dual variable for constraint d77
  c_float    d78;        // Your dual variable for constraint d78
  c_float    d79;        // Your dual variable for constraint d79
  c_float    d80;        // Your dual variable for constraint d80
  c_float    d81;        // Your dual variable for constraint d81
  c_float    d82;        // Your dual variable for constraint d82
  c_float    d83;        // Your dual variable for constraint d83
  c_float    d84;        // Your dual variable for constraint d84
} CPG_Dual_t;

// Solver information
typedef struct {
  c_float    obj_val;    // Objective function value
  c_int      iter;       // Number of iterations
  c_int      status;     // Solver status
  c_float    pri_res;    // Primal residual
  c_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;      // Primal solution
  CPG_Dual_t *dual;      // Dual solution
  CPG_Info_t *info;      // Solver info
} CPG_Result_t;

// Solver settings
typedef struct {
  c_float    feastol;
  c_float    abstol;
  c_float    reltol;
  c_float    feastol_inacc;
  c_float    abstol_inacc;
  c_float    reltol_inacc;
  c_int      maxit;
} Canon_Settings_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern c_float cpg_params_vec[1114];

// Sparse mappings from user-defined to canonical parameters
extern csc canon_A_map;
extern csc canon_b_map;
extern csc canon_G_map;
extern csc canon_h_map;

// Canonical parameters
extern c_float canon_c[157];
extern c_float canon_c_ECOS[157];
extern csc canon_A;
extern csc canon_A_ECOS;
extern c_float canon_b[117];
extern c_float canon_b_ECOS[117];
extern csc canon_G;
extern csc canon_G_ECOS;
extern c_float canon_h[202];
extern c_float canon_h_ECOS[202];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;
extern Canon_Params_t Canon_Params_ECOS;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// User-defined variables
extern c_float cpg_X[96];
extern c_float cpg_U[42];
extern c_float cpg_X_cmp[16];

// Dual variables associated with user-defined constraints
extern c_float cpg_d0[12];
extern c_float cpg_d1[12];
extern c_float cpg_d13[12];
extern c_float cpg_d25[12];
extern c_float cpg_d37[12];
extern c_float cpg_d49[12];
extern c_float cpg_d61[12];
extern c_float cpg_d73[12];

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// Struct containing solver settings
extern Canon_Settings_t Canon_Settings;

// ECOS array of SOC dimensions
extern c_int ecos_q[3];

// ECOS workspace
extern pwork* ecos_workspace;

// ECOS exit flag
extern c_int ecos_flag;
